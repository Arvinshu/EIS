# \u76EE\u5F55\u7ED3\u6784: ElasticsearchIndexService/src/main/resources/application-prod.properties
# \u6587\u4EF6\u540D\u79F0: application-prod.properties
# \u5F00\u53D1\u65F6\u95F4: 2025-05-18 23:21:10 UTC/GMT+08:00
# \u4F5C\u8005: Gemini
# \u4EE3\u7801\u7528\u9014: \u751F\u4EA7\u73AF\u5883\u7684\u7279\u5B9A\u914D\u7F6E\u3002

#\u5207\u6362\u914D\u7F6E\u6587\u4EF6\uFF08\u6FC0\u6D3B Profile\uFF09
#
#\u65B9\u6CD51\uFF1A\u901A\u8FC7 JVM \u7CFB\u7EDF\u5C5E\u6027: \u5728\u542F\u52A8\u5E94\u7528\u65F6\uFF0C\u4F7F\u7528 -Dspring.profiles.active=<profile_name>\u3002
#\u4F8B\u5982\uFF0C\u6FC0\u6D3B\u5F00\u53D1\u73AF\u5883\u914D\u7F6E: java -jar -Dspring.profiles.active=dev ElasticsearchIndexService.jar
#\u4F8B\u5982\uFF0C\u6FC0\u6D3B\u751F\u4EA7\u73AF\u5883\u914D\u7F6E: java -jar -Dspring.profiles.active=prod ElasticsearchIndexService.jar
#
# \u65B9\u6CD52\uFF1A\u901A\u8FC7\u73AF\u5883\u53D8\u91CF: \u8BBE\u7F6E\u540D\u4E3A SPRING_PROFILES_ACTIVE \u7684\u73AF\u5883\u53D8\u91CF\u3002
#\u4F8B\u5982: export SPRING_PROFILES_ACTIVE=dev (Linux/macOS) \u6216 set SPRING_PROFILES_ACTIVE=dev (Windows)\uFF0C\u7136\u540E\u8FD0\u884C java -jar ElasticsearchIndexService.jar\u3002
#
# \u65B9\u6CD53\uFF1A\u5728 application.properties \u4E2D\u6307\u5B9A\u9ED8\u8BA4\u6FC0\u6D3B\u7684 Profile (\u4E0D\u63A8\u8350\u7528\u4E8E\u751F\u4EA7\u73AF\u5883\u7684\u7075\u6D3B\u5207\u6362\uFF0C\u4F46\u53EF\u7528\u4E8E\u8BBE\u7F6E\u5F00\u53D1\u65F6\u7684\u9ED8\u8BA4\u503C):
#\u5728 application.properties \u4E2D\u6DFB\u52A0: spring.profiles.active=dev
#\u8FD9\u79CD\u65B9\u5F0F\u8BBE\u7F6E\u7684 Profile \u4F1A\u88AB JVM \u7CFB\u7EDF\u5C5E\u6027\u6216\u73AF\u5883\u53D8\u91CF\u8986\u76D6\u3002

# \u670D\u52A1\u5668\u7AEF\u53E3
# \u751F\u4EA7\u73AF\u5883\u5E38\u7528\u7AEF\u53E3
server.port=8080

# Kafka \u751F\u4EA7\u73AF\u5883\u914D\u7F6E
# \u751F\u4EA7\u73AF\u5883Kafka\u96C6\u7FA4\u5730\u5740
#spring.kafka.bootstrap-servers=kafka-broker1.prod:9092,kafka-broker2.prod:9092,kafka-broker3.prod:9092
spring.kafka.bootstrap-servers=${KAFKA_BROKERS}:${KAFKA_PORT}
# \u751F\u4EA7\u73AF\u5883\u7981\u6B62\u81EA\u52A8\u521B\u5EFATopic\uFF0C\u5E94\u8BE5\u8BBE\u7F6E\u4E3A false \u5E94\u7531\u8FD0\u7EF4\u7BA1\u7406
spring.kafka.admin.auto-create=true
dms.indexer.kafka.partitions=1 # \u751F\u4EA7\u73AF\u5883Topic\u5206\u533A\u6570\uFF0C\u9ED8\u8BA4\u503C\u4E3A3\uFF0C\u6839\u636E\u5B9E\u9645\u60C5\u51B5\u8C03\u6574\uFF0C\u5982\u679C\u662F\u5355\u673A\u8BBE\u7F6E\u4E3A1
dms.indexer.kafka.replicas=1   # \u751F\u4EA7\u73AF\u5883Topic\u526F\u672C\u6570\uFF0C\u9ED8\u8BA4\u503C\u4E3A3\uFF0C\u6839\u636E\u96C6\u7FA4\u60C5\u51B5\u8C03\u6574,\u5982\u679C\u662F\u5355\u673A\u5219\u8BBE\u7F6E\u4E3A1

# Elasticsearch \u751F\u4EA7\u73AF\u5883\u914D\u7F6E
dms.indexer.elasticsearch.host=${ES_HOST}
dms.indexer.elasticsearch.port=${ES_PORT}
dms.indexer.elasticsearch.username=${ES_USER:elastic}
dms.indexer.elasticsearch.password=${ES_PASSWORD:pleasechangemeelastic}

# dms.indexer.elasticsearch.username=prod_user # \u751F\u4EA7\u73AF\u5883ES\u7528\u6237\u540D
# dms.indexer.elasticsearch.password=prod_password # \u751F\u4EA7\u73AF\u5883ES\u5BC6\u7801

# \u5386\u53F2\u6570\u636E\u7D22\u5F15\u6279\u5904\u7406\u5927\u5C0F
dms.indexer.batch.historical.chunk-size=100
# \u53EF\u9009: \u6279\u5904\u7406\u6B65\u9AA4\u4EFB\u52A1\u6267\u884C\u5668\u914D\u7F6E
dms.indexer.batch.task-executor.core-pool-size=5
dms.indexer.batch.task-executor.max-pool-size=10


# \u6587\u4EF6\u5904\u7406\u751F\u4EA7\u73AF\u5883\u914D\u7F6E
# \u751F\u4EA7\u73AF\u5883\u7684\u76EE\u6807\u6587\u4EF6\u76EE\u5F55
dms.common.target-base-dir=${FILE_SYNC_TARGET_DIR}

# Spring Batch \u751F\u4EA7\u73AF\u5883\u914D\u7F6E (\u4F7F\u7528\u5916\u90E8\u6570\u636E\u5E93)
# \u751F\u4EA7\u73AF\u5883\u4E0D\u81EA\u52A8\u521B\u5EFA\u8868\u7ED3\u6784\uFF0C\u5E94\u624B\u52A8\u6216\u901A\u8FC7\u8FC1\u79FB\u5DE5\u5177\u521B\u5EFA
spring.batch.jdbc.initialize-schema=ALWAYS

# \u751F\u4EA7\u73AF\u5883Batch\u5143\u6570\u636E\u6570\u636E\u5E93\u8FDE\u63A5\u914D\u7F6E (PostgreSQL)
# \u6570\u636E\u5E93\u9A71\u52A8\u7C7B\u540D
spring.datasource.driver-class-name=org.postgresql.Driver
# \u6570\u636E\u5E93\u8FDE\u63A5 URL (\u8BF7\u6839\u636E\u5B9E\u9645\u60C5\u51B5\u4FEE\u6539\u4E3B\u673A\u3001\u7AEF\u53E3\u3001\u6570\u636E\u5E93\u540D)\uFF0C\u6570\u636E\u5E93\u8FDE\u63A5\u914D\u7F6E\uFF08\u901A\u8FC7\u73AF\u5883\u53D8\u91CF\u6CE8\u5165\uFF09
spring.datasource.url=jdbc:postgresql://${DB_HOST:postgresql.server}:${DB_PORT:5432}/${DB_NAME:dms_batch_meta}?currentSchema=public&serverTimezone=UTC&useUnicode=true&characterEncoding=utf8
# \u6570\u636E\u5E93\u7528\u6237\u540D (\u8BF7\u4F7F\u7528\u5B89\u5168\u7684\u7528\u6237\u540D)
spring.datasource.username=${DB_USER:batch_user}
# \u6570\u636E\u5E93\u5BC6\u7801 (\u8BF7\u4F7F\u7528\u5F3A\u5BC6\u7801\uFF0C\u5E76\u8003\u8651\u4F7F\u7528\u73AF\u5883\u53D8\u91CF\u6216\u914D\u7F6E\u4E2D\u5FC3\u7BA1\u7406)
spring.datasource.password=${DB_PASSWORD:batch_password}


# Actuator (\u751F\u4EA7\u73AF\u5883\u5E94\u6309\u9700\u66B4\u9732\uFF0C\u4F8B\u5982\u4EC5 health \u548C info)
management.endpoints.web.exposure.include=health,info,prometheus
